
@{
    ViewBag.Title = "Settings";
}

@{
    Layout = "~/Views/Shared/DashboardLayout.cshtml";
}

@{
    bool IsApiActive = false;
    int Requests = 0;
    float RequestsPercent = 0;
    string ApiKey = "";
    //int ClientId = ((ViewBag.Client as IEnumerable<Client>).First().Id);

    if (ViewBag.ApiKey.Count > 0) {
        IsApiActive = ((ViewBag.ApiKey as IEnumerable<ApiKey>).First().IsActive);
        Requests = ((ViewBag.ApiKey as IEnumerable<ApiKey>).First().AmountOfRequests);
        RequestsPercent = (Requests / 10000.0f) * 100;
        ApiKey = ((ViewBag.ApiKey as IEnumerable<ApiKey>).First().Key);
    }
}

@model API.Models.Client
@using API.Models

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item active" aria-current="page">Settings</li>
    </ol>
</nav>

<div class="d-inline-flex flex-wrap gap-4 w-100">
    <div class="card text-bg-light mb-3 flex-grow-1">
        <div class="card-header">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
                <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
            </svg>
            Personal Details
        </div>
        <div class="card-body">
            @using (Html.BeginForm("UpdatePersonalDetails", "Dashboard", FormMethod.Post)) {
                @Html.AntiForgeryToken()
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.Name)
                    @Html.TextBoxFor(model => model.Name, Model.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.Address)
                    @Html.TextBoxFor(model => model.Address, Model.Address, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.Country)
                    @Html.DropDownListFor(model => model.Country, (IEnumerable<SelectListItem>)ViewBag.CountryOptions, Model.Country, new { @class = "form-select", id = "countrySelect" })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
                <div id="stateDropdown">
                    @if (!string.IsNullOrEmpty(Model.State)) {
                        <div class="form-group mb-3 needs-validation">
                            @Html.LabelFor(model => model.State)
                            @Html.DropDownListFor(model => model.State, (IEnumerable<SelectListItem>)ViewBag.StateOptions, Model.State, new { @class = "form-select", id = "stateSelect", onclick = "hookOnChange()" })
                            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                        </div>
                    }
                </div>
                <div id="citiesDropdown">
                    @if (!string.IsNullOrEmpty(Model.City)) {
                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.City)
                            @Html.DropDownListFor(model => model.City, (IEnumerable<SelectListItem>)ViewBag.CityOptions, Model.City, new { @class = "form-select", id = "citySelect" })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                    }
                </div>
                <button type="submit" class="btn btn-success mt-3">Submit</button>
            }
        </div>
    </div>
    <div class="d-flex flex-column">
        <div class="card text-bg-light mb-3 flex-grow-1">
            <div class="card-header">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-fill" viewBox="0 0 16 16">
                    <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414zM0 4.697v7.104l5.803-3.558zM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586zm3.436-.586L16 11.801V4.697z" />
                </svg>
                Update Email Address
            </div>
            <div class="card-body">
                @using (Html.BeginForm("UpdateEmail", "Dashboard", FormMethod.Post, new { @class = "form-centered" })) {
                    @Html.AntiForgeryToken()
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.Email)
                        @Html.TextBoxFor(model => model.Email, Model.Email, new { @class = "form-control", style = "width: 100%;" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.Password)
                        @Html.TextBoxFor(model => model.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                    <button type="submit" class="btn btn-success mt-3">Submit</button>
                }
            </div>
        </div>
        <div class="card text-bg-light mb-3 flex-grow-1">
            <div class="card-header">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill" viewBox="0 0 16 16">
                    <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2M2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                </svg>
                API Key Settings
            </div>
            <div class="card-body">
                @using (Html.BeginForm("UpdateApiKey", "Dashboard", FormMethod.Post)) {
                    @Html.AntiForgeryToken()
                    <div class="form-check form-switch">
                        <div class="form-check">
                            @Html.CheckBox("IsActive", IsApiActive, new { @class = "form-check-input" })
                            <label class="form-check-label" for="IsChecked">
                                @if (IsApiActive) {
                                    <p>Active</p>
                                } else {
                                    <p>Disabled</p>
                                }
                            </label>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-success mt-3">Submit</button>
                }
            </div>
        </div>
    </div>
</div>
<style>
    .form-control {
        width: 100% !important;
    }
</style>
@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/utils.js"></script>
}

