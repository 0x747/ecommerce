
@{
    ViewBag.Title = "Settings";
}

@{
    Layout = "~/Views/Shared/DashboardLayout.cshtml";
}

@{
    bool IsApiActive = false;
    int Requests = 0;
    float RequestsPercent = 0;
    string ApiKey = "";
    int Limit = 1;

    if (ViewBag.ApiKey.Count > 0) {
        IsApiActive = ((ViewBag.ApiKey as IEnumerable<ApiKey>).First().IsActive);
        Requests = ((ViewBag.ApiKey as IEnumerable<ApiKey>).First().AmountOfRequests);
        Limit = ((ViewBag.ApiKey as IEnumerable<ApiKey>).First().Limit);
        RequestsPercent = ((float)Requests / Limit) * 100;
        ApiKey = ((ViewBag.ApiKey as IEnumerable<ApiKey>).First().Key);
    }
}

@model API.Models.Client
@using API.Models

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/Dashboard">Dashboard</a></li>
        <li class="breadcrumb-item active" aria-current="page">Settings</li>
    </ol>
</nav>

<div class="d-inline-flex flex-wrap gap-4 w-100">
    <div class="card text-bg-light mb-3 flex-grow-1">
        <div class="card-header d-inline-flex justify-content-between">
            <div>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
                    <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                </svg>
                Personal Details
            </div>
            @*@if (!string.IsNullOrEmpty(Model.DateModified.ToString()))
            {
                <span class="text-secondary">Last updated on @Model.DateModified</span>
            }*@

        </div>
        <div class="card-body">
            @using (Html.BeginForm("UpdatePersonalDetails", "Dashboard", FormMethod.Post))
            {
                @Html.AntiForgeryToken()
                @Html.TextBoxFor(model => model.Id, Model.Id.ToString() , new { @class = "form-control", hidden = true })
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.Name)
                    @Html.TextBoxFor(model => model.Name, Model.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.Address)
                    @Html.TextBoxFor(model => model.Address, Model.Address, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
                <div class="form-group mb-3">
                    @Html.LabelFor(model => model.Country)
                    @Html.DropDownListFor(model => model.Country, (IEnumerable<SelectListItem>)ViewBag.CountryOptions, Model.Country, new { @class = "form-select", id = "countrySelect" })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
                <div id="stateDropdown">
                    @if (!string.IsNullOrEmpty(Model.State))
                    {
                        <div class="form-group mb-3 needs-validation">
                            @Html.LabelFor(model => model.State)
                            @Html.DropDownListFor(model => model.State, (IEnumerable<SelectListItem>)ViewBag.StateOptions, Model.State, new { @class = "form-select", id = "stateSelect", onclick = "hookOnChange()" })
                            @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                        </div>
                    }
                </div>
                <div id="citiesDropdown">
                    @if (!string.IsNullOrEmpty(Model.City))
                    {
                        <div class="form-group mb-3">
                            @Html.LabelFor(model => model.City)
                            @Html.DropDownListFor(model => model.City, (IEnumerable<SelectListItem>)ViewBag.CityOptions, Model.City, new { @class = "form-select", id = "citySelect" })
                            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                        </div>
                    }
                </div>
                <div class="form-group">
                    <label>Phone Number</label>
                    <div class="input-group">
                        @Html.DropDownListFor(model => model.CountryCode, (IEnumerable<SelectListItem>)ViewBag.CountryCodeOptions, "Phone Code", new { @class = "form-select", id = "phoneCodeSelect" })
                        @Html.TextBoxFor(model => model.ContactNumber, new { @class = "form-control", placeholder = "Phone number" })
                    </div>
                    @Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })
                    @Html.ValidationMessageFor(model => model.ContactNumber, "", new { @class = "text-danger" })
                </div>
                <button type="submit" class="btn btn-success mt-3 mb-3">Submit</button>
            }
            @if (ViewBag.ShowSuccess == true)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    Details Updated.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            else if (ViewBag.ShowSuccess == false)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    Could not update details. Check your input and try again.
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
        </div>
    </div>
    <div class="d-flex flex-column">
        <div class="card text-bg-light mb-3 flex-grow-1">
            <div class="card-header">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-envelope-fill" viewBox="0 0 16 16">
                    <path d="M.05 3.555A2 2 0 0 1 2 2h12a2 2 0 0 1 1.95 1.555L8 8.414zM0 4.697v7.104l5.803-3.558zM6.761 8.83l-6.57 4.027A2 2 0 0 0 2 14h12a2 2 0 0 0 1.808-1.144l-6.57-4.027L8 9.586zm3.436-.586L16 11.801V4.697z" />
                </svg>
                Update Email Address
            </div>
            <div class="card-body">
                @using (Html.BeginForm("UpdateClientEmail", "Dashboard", FormMethod.Post, new { @class = "form-centered" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.TextBoxFor(model => model.Id, Model.Id.ToString(), new { @class = "form-control", hidden = true })
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.Email)
                        @Html.TextBoxFor(model => model.Email, Model.Email, new { @class = "form-control", style = "width: 100%;" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.Password)
                        @Html.TextBoxFor(model => model.Password, new { @class = "form-control", type = "password" })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                    <button type="submit" class="btn btn-success mt-3 mb-3">Submit</button>
                }
                @if (ViewBag.ShowEmailSuccess == true)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        Email Address Updated.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                else if (ViewBag.ShowEmailSuccess == false)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        Could not update email. Check your password.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
            </div>
        </div>
        <div class="card text-bg-light mb-3 flex-grow-1">
            <div class="card-header">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-shield-lock-fill" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.8 11.8 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7 7 0 0 0 1.048-.625 11.8 11.8 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.54 1.54 0 0 0-1.044-1.263 63 63 0 0 0-2.887-.87C9.843.266 8.69 0 8 0m0 5a1.5 1.5 0 0 1 .5 2.915l.385 1.99a.5.5 0 0 1-.491.595h-.788a.5.5 0 0 1-.49-.595l.384-1.99A1.5 1.5 0 0 1 8 5" />
                </svg>
                Change Password
            </div>
            <div class="card-body">
                @using (Html.BeginForm("UpdateClientPassword", "Dashboard", FormMethod.Post, new { @class = "form-centered" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.TextBoxFor(model => model.Id, Model.Id.ToString(), new { @class = "form-control", hidden = true })
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.Password)
                        @Html.TextBoxFor(model => model.Password, Model.Password, new { @class = "form-control", style = "width: 100%;", type = "password"})
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group mb-3">
                        @Html.LabelFor(model => model.NewPassword)
                        @Html.TextBoxFor(model => model.NewPassword, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                    </div>
                    <button type="submit" class="btn btn-success mt-3 mb-3">Submit</button>
                }
                @if (ViewBag.ShowPasswordSuccess == true)
                {
                    <div class="alert alert-success alert-dismissible fade show" role="alert">
                        Password Updated.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                else if (ViewBag.ShowPasswordSame == true)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        New password cannot be the same as old password.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                else if (ViewBag.ShowPasswordSuccess == false)
                {
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        Could not update password. Check your password.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
            </div>
        </div>
        <div class="card text-bg-light mb-3 flex-grow-1">
            <div class="card-header">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-key-fill" viewBox="0 0 16 16">
                    <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2M2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                </svg>
                API Key Settings
            </div>
            <div class="card-body">
                @if (IsApiActive)
                {
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#disableKeyModal">Disable API Key</button>

                    <div class="modal fade" id="disableKeyModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="exampleModalLabel">Disable API Key</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="alert alert-warning" role="alert">
                                        You will not be able to make API requests if you disable your key.
                                    </div>
                                    @using (Html.BeginForm("DisableApiKey", "Dashboard", FormMethod.Post, new { id = "disableKeyForm" }))
                                    {
                                        @Html.AntiForgeryToken();
                                        @Html.TextBoxFor(model => model.Id, Model.Id.ToString(), new { @class = "form-control", hidden = true })

                                        <div class="form-group mb-3">
                                            <label class="form-label">Type 'disable'</label>
                                            <input class="form-control" id="disableTextbox" />
                                        </div>
                                        <div class="form-group mb-3">
                                            @Html.LabelFor(model => model.Password)
                                            @Html.TextBoxFor(model => model.Password, Model.Password, new { @class = "form-control", style = "width: 100%;", type = "password" })
                                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                        </div>
                                    }
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="submit" form="disableKeyForm" class="btn btn-danger" id="disableButton" disabled>Disable</button>
                                </div>
                            </div>
                        </div>
                    </div>

                }
                else
                {
                    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#enableKeyModal">Enable API Key</button>

                    <div class="modal fade" id="enableKeyModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="exampleModalLabel">Enable API Key</h1>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                </div>
                                <div class="modal-body">
                                    @using (Html.BeginForm("EnableApiKey", "Dashboard", FormMethod.Post, new { id = "enableKeyForm" }))
                                    {
                                        @Html.AntiForgeryToken();
                                        @Html.TextBoxFor(model => model.Id, Model.Id.ToString(), new { @class = "form-control", hidden = true })
                                        <div class="form-group mb-3">
                                            @Html.LabelFor(model => model.Password)
                                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", type = "password" })
                                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-  danger", style = "color: red;" })
                                        </div>
                                    }
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="submit" form="enableKeyForm" class="btn btn-success" id="enableButton">Enable</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#changeLimitModal">
                    Change Request Limit
                </button>

                <!-- Modal -->
                <div class="modal fade" id="changeLimitModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h1 class="modal-title fs-5" id="exampleModalLabel">Change Request Limit</h1>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <ul class="list-group list-group-flush">
                                    <li class="list-group-item">
                                        <div class="alert d-flex justify-content-between align-items-center" style="background-color: lightgreen; border-color: darkseagreen;">
                                            Current Plan: @Limit.ToString("N0") Requests
                                        </div>
                                    </li>
                                    <li class="list-group-item">
                                        <div class="alert alert-info d-flex justify-content-between align-items-center">
                                            25,000 Requests
                                            <button class="btn btn-info">$25/month</button>
                                        </div>
                                    </li>
                                    <li class="list-group-item">
                                        <div class="alert alert-primary d-flex justify-content-between align-items-center">
                                            100,000 Requests
                                            <button class="btn btn-primary">$95/month</button>
                                        </div>
                                    </li>
                                    <li class="list-group-item">
                                        <div class="alert alert-success d-flex justify-content-between align-items-center">
                                            Unlimited Requests
                                            <button class="btn btn-success">$250/month</button>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
                @if (ViewBag.ShowKeyDisabled == true)
                {
                    <div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
                        API Key is disabled.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                else if (ViewBag.ShowKeyDisabled == false)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        Failed to disable key. Check your password.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                else if (ViewBag.ShowKeyEnabled == true)
                {
                    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                        API Key is now enabled.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                else if (ViewBag.ShowKeyEnabled == false)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        Failed to re-activate key. Check your password.
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<style>
    .form-control {
        width: 100% !important;
    }
</style>
@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.12/dist/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/utils.js"></script>
}

